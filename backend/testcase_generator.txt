# Test Case Generation Rules

## Problem Statement
{PROBLEM_STATEMENT}

## Task
Generate a JSON array of exactly 30 test cases covering the problem constraints and edge cases.

## Requirements
- 30 test cases: 8 easy, 10 medium, 8 hard, 4 stress.
- For each input parameter, provide its value and a boolean indicating if it needs Python evaluation.
- Test all constraint boundaries mentioned in the problem.
- Include edge cases: empty inputs, single elements, min/max limits.

## Input Format Instructions
- The output MUST be a single JSON array.
- Each element in the array is a test case object with two keys: `id` and `inputs`.
- `id`: An integer identifier for the test case (e.g., 1, 2, 3).
- `inputs`: A JSON array of objects. Each object represents one parameter and has three keys:
    - `"name"`: The exact parameter name from the problem statement (e.g., "nums1", "target").
    - `"data"`: The input value. Can be a native JSON type (number, string, array) or a string containing a Python expression.
    - `"python"`: A boolean. `false` if "data" is a standard JSON value, `true` if "data" is a string that needs Python's `eval()` to be generated.

## For Large Data Use Python Expressions
When `python` is `true` for a parameter, its `"data"` field must be a string containing a valid Python expression. It must start with `print(` and end with `)`. For multi-line code, separate using `\n`.
- `'print([1] * 1000)'` - Repeated values
- `'print(list(range(1000000)))'` - Sequential numbers
- `'print("a" * 50000)'` - Large strings
- `'print(random.seed(42) or [random.randint(1,100) for _ in range(10000)])'` - Random data
- `'print(random.seed(42) or [random.randint(-1000,1000) for _ in range(5000)])'` - Random data with custom range

## Critical
- Always use the EXACT parameter names from problem examples as the value for the "name" key.
- Ensure the final output is a valid JSON array and adheres strictly to the specified format.

## Output Format
```json
[
  {
    "id": 1,
    "inputs": [
      {
        "name": "nums1",
        "data": [1, 3],
        "python": false
      },
      {
        "name": "nums2",
        "data": [2],
        "python": false
      }
    ]
  },
  {
    "id": 2,
    "inputs": [
      {
        "name": "nums1",
        "data": "print([1] * 10000)",
        "python": true
      },
      {
        "name": "nums2",
        "data": "print(list(range(10000)))",
        "python": true
      }
    ]
  },
  {
    "id": 3,
    "inputs": [
      {
        "name": "x",
        "data": 121,
        "python": false
      }
    ]
  },
  {
    "id": 4,
    "inputs": [
      {
        "name": "s",
        "data": "aa",
        "python": false
      },
      {
        "name": "p",
        "data": "a",
        "python": false
      }
    ]
  },
  {
    "id": 5,
    "inputs": [
      {
        "name": "strs",
        "data": ["flower", "flow", "flight"],
        "python": false
      }
    ]
  },
  {
    "id": 6,
    "inputs": [
      {
        "name": "random_numbers",
        "data": "print(random.seed(42) or [random.randint(-1000,1000) for _ in range(5000)])",
        "python": true
      }
    ]
  }
]
```